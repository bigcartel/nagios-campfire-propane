#!/usr/bin/env ruby
require 'rubygems'
require 'optparse'
require 'tinder'

# Borrowed and modifified from Rails v3.2
class Time
  def distance_of_time_in_words(time=Time.new)
    self.class.distance_of_time_in_words(self, time)
  end
  
  def self.distance_of_time_in_words(from_time, to_time = 0, include_seconds = false, options = {})
    from_time = from_time.to_time if from_time.respond_to?(:to_time)
    to_time = to_time.to_time if to_time.respond_to?(:to_time)
    distance_in_minutes = (((to_time - from_time).abs)/60).round
    distance_in_seconds = ((to_time - from_time).abs).round

    case distance_in_minutes
      when 0..1
        return distance_in_minutes == 0 ?
               "less than 1 minute" :
               "#{distance_in_minutes} minutes" unless include_seconds

        case distance_in_seconds
          when 0..59 then "#{distance_in_seconds} seconds"
          else            "1 minute"
        end

      when 2..44           then "#{distance_in_minutes} minutes"
      when 45..89          then "about 1 hour"
      when 90..2519        then "about #{(distance_in_minutes.to_f / 60.0).round} hours"
      when 2520..43199     then "#{(distance_in_minutes.to_f / 1440.0).round} days"
      when 43200..86399    then "about 1 month"
      when 86400..525599   then "#{(distance_in_minutes.to_f / 43200.0).round} days"
      else
        fyear = from_time.year
        fyear += 1 if from_time.month >= 3
        tyear = to_time.year
        tyear -= 1 if to_time.month < 3
        leap_years = (fyear > tyear) ? 0 : (fyear..tyear).count{|x| Date.leap?(x)}
        minute_offset_for_leap_year = leap_years * 1440
        # Discount the leap year days when calculating year distance.
        # e.g. if there are 20 leap year days between 2 dates having the same day
        # and month then the based on 365 days calculation
        # the distance in years will come out to over 80 years when in written
        # english it would read better as about 80 years.
        minutes_with_offset         = distance_in_minutes - minute_offset_for_leap_year
        remainder                   = (minutes_with_offset % 525600)
        distance_in_years           = (minutes_with_offset / 525600)
        if remainder < 131400
          "about #{distance_in_years} years"
        elsif remainder < 394200
          "over #{distance_in_years} years"
        else
          "almost #{distance_in_years+1} years"
        end
    end
  end
end

def parse_notification(str)
  h = Hash.new
  str.each_line do |line|
    if line =~ /^([^:]+):(.*)$/
      h[$1] = $2.strip
    end
  end
  if h.has_key?('service')
    {
      :code => $status_codes[h['state']],
      :since => (Time.new - h['duration'].to_i).distance_of_time_in_words,
      :number => h['number'],
      :subject => "#{h['service']} on #{h['host']}",
      :message => h['info'],
      :service => h['service'],
      :host => h['host'],
    }
  else
    {
      :code => $status_codes[h['state']],
      :since => (Time.new - h['duration'].to_i).distance_of_time_in_words,
      :number => h['number'],
      :subject => "#{h['host']} (#{h['address']})",
      :message => h['info'],
      :host => h['host'],
    }
  end
end

$status_codes = {
  'OK' => 0,
  'UP' => 0,
  'WARNING' => 1,
  'DOWN' => 2,
  'CRITICAL' => 2,
  'UNKNOWN' => 3,
}
$status_codes.default = 3

options = { 
  :subdomain => nil,
  :token => nil,
  :room => 'Alerts',
  :extinfo => "http://#{`hostname -f`.chomp}/thruk/#cgi-bin/extinfo.cgi"
}

optparse = OptionParser.new do |o| 
  o.banner = "Usage: printf \"%b\" \"<message>\" #{File.basename($0)}"

  o.on("-e", "--path-to-extinfo PATH", String, "Path to extinfo.cgi (default: #{options[:extinfo]})") do |s|
    options[:extinfo] = s
  end

  o.on("-r", "--room ROOM", String, "Campfire room (default: #{options[:room]})") do |s|
    options[:room] = s
  end

  o.on("-s", "--subdomain SUBDOMAIN", String, "Campfire sub-domain") do |s|
    options[:subdomain] = s
  end

  o.on("-t", "--token TOKEN", String, "Campfire API token") do |s|
    options[:token] = s
  end

  o.separator ""

  o.on_tail('-h', '--help', 'Display this help screen') do
    puts o
    exit 1
  end 
end

optparse.parse!

if options[:subdomain].nil?
  $stderr.puts "You must specify a sub-domain"
  exit!
elsif options[:token].nil?
  $stderr.puts "You must specify an API token"
  exit!
end

# This is used to test out the compfire interactions
notification = <<EOF
type:PROBLEM
host:xen10
state:CRITICAL
service:MegaRAID SAS
duration:18
number:39
info:CRITICAL - Plugin timed out after 10 seconds
EOF

# Comment this line out in order to set a test notification
notification = ARGF.read

campfire = Tinder::Campfire.new options[:subdomain], :token => options[:token], :ssl_options => {:verify => false}
room = campfire.find_room_by_name(options[:room])
begin
  data = parse_notification(notification)
  if data[:service]
    url = "#{options[:extinfo]}?type=2&host=#{CGI::escape data[:host]}&service=#{CGI::escape data[:service]}"
  else
    url = "#{options[:extinfo]}?type=1&host=#{CGI::escape data[:host]}"
  end
  # The url is escaped twice to prevent Propane from helpfully truncating it
  room.speak "$NAGIOS$|notification|#{data[:code]}|#{data[:since]}|#{data[:number]}|#{data[:subject]}|#{data[:message]}|#{CGI::escape url}"
rescue
  room.speak "$NAGIOS$|notification|3|0|0|Notify By Campfire|You've managed to bungle your campfire plugin. Go fix it! (#{$!.to_s})."
end
